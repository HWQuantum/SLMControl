* SLMControl
A cross-platform python library for controlling SLMs using (mostly) PyQt5.

Contains a bunch of qt widgets which allow for controlling SLM screens,
setting the lookup tables, setting zernike polynomial corrections,
choosing which desktop they display on, etc...

** Use
   Run the file "experiment_controller.py" and you'll get an interface which allows 
   control over SLMs.
     
   You use slm_controller.py for displaying OAM patterns on slms.
   You use coincidence_counting.py for coincidence counting :^).
   For coincidence counting to run, you need the hhlib_sys library for controlling 
   your Hydra Harp 400, which can be found [[https://github.com/HWQuantum/coincidence-counter][here]].
   Follow the instructions to compile that, then place the resulting library into the SLMControl
   folder in this repo.
*** Experiments
    All experiments are functions in the experiments.py file.
    To make a new experiment, just add a function to that file that takes the arguments:
    - slm_control
    - coincidence_counter
    - qapplication
    And add a __menu_name__ and __tooltip__ string attribute to the function 
    (so it appears in the qt experiments menu)

** Requirements
*** Python requirements
    - PyQt5
    - pyqtgraph
    - numpy

** Todos
   - [X] Add in a saving/loading function
   - [X] Add in the ability to change the lookup table at more points
   - [X] Make a list where more LUT widgets can be added
   - [X] Maybe show the LUT on a little plot
   - [X] Work on the opening windows on different desktops (it doesn't work correctly)
   - [X] Make the slm windows close when the main widget closes
   - [X] Have the ability to reshow the slm windows when closed/hidden
   - [X] Have the ability to put zernike functions onto the beam? (add an amplitude or something)
   - [X] In coincidence_counting, make the measure_and_get_values function not block the GUI
     this is caused by the rust function not release the GIL
     maybe pyobject3 has some way to release the GIL in this function?
   - [ ] Look at changing the current json based settings into use the QSettings class
   - [ ] Improve the lookup table widget.
   - [ ] Add in the ability to save and load the state of individual widgets (use a context menu right click) [[https://wiki.python.org/moin/PyQt/Handling%2520context%2520menus][As described here]]
   - [ ] Add in a pop-up widget (probably called from the file menu) which allows for fine-tuned adjusting of the x and y parameters of the slms
     ( for automatic alignment )
     
** Redesigning the pattern control interface
Each pattern has in common that it's generated over a given x-y grid (using the meshgrid function). 
The first arguments for each pattern are:
'''pattern(X, Y, components, ...)'''
Where components is a vector of complex numbers which define the state the pattern refers to.
The ellipsis is the set of arguments which apply to a specific pattern. For example, using a pizza basis - the arguments would be, slice spacing, rotations, etc...
The basis of the components vector is the computational basis for that specific pattern.
There is a function which calculates the components in the computational basis for a basis vector of the MUBs (in prime dimensions) of that pattern.

The patterns all have in common:
- A central position
- A diffraction grating
- A dimension
- A components control interface
- Two sets of zernike polynomials - one over the central position of the pattern, and one over the slm screen

*** Components control interface
This interface allows control over what components are displayed on the slm. 
This is a tabbed menu of either:
- the individual complex numbers (arg and angle)
- The mub and basis selection
These are both defined by the current dimension selected

*** SLM Pattern selection
The individual arguments after X, Y, components are different for each different pattern which is selected.
These are selected between using a drop-down menu, which changes the different selections.
